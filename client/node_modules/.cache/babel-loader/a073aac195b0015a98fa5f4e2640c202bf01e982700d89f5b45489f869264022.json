{"ast":null,"code":"var _jsxFileName = \"D:\\\\Community Connector\\\\client\\\\src\\\\contexts\\\\AlertContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AlertContext = /*#__PURE__*/createContext();\nexport const AlertProvider = ({\n  children\n}) => {\n  _s();\n  const [alerts, setAlerts] = useState([]);\n\n  // Add alert\n  const addAlert = (message, severity = 'info', timeout = 5000) => {\n    const id = Math.random().toString(36).substr(2, 9);\n    const newAlert = {\n      id,\n      message,\n      severity,\n      // 'error', 'warning', 'info', 'success'\n      timeout\n    };\n    setAlerts(prevAlerts => [...prevAlerts, newAlert]);\n\n    // Auto remove alert after timeout\n    if (timeout > 0) {\n      setTimeout(() => removeAlert(id), timeout);\n    }\n    return id;\n  };\n\n  // Remove alert\n  const removeAlert = id => {\n    setAlerts(prevAlerts => prevAlerts.filter(alert => alert.id !== id));\n  };\n\n  // Clear all alerts\n  const clearAlerts = () => {\n    setAlerts([]);\n  };\n\n  // Convenience methods for different alert types\n  const setError = (message, timeout = 5000) => addAlert(message, 'error', timeout);\n  const setWarning = (message, timeout = 5000) => addAlert(message, 'warning', timeout);\n  const setInfo = (message, timeout = 5000) => addAlert(message, 'info', timeout);\n  const setSuccess = (message, timeout = 5000) => addAlert(message, 'success', timeout);\n  return /*#__PURE__*/_jsxDEV(AlertContext.Provider, {\n    value: {\n      alerts,\n      addAlert,\n      removeAlert,\n      clearAlerts,\n      setError,\n      setWarning,\n      setInfo,\n      setSuccess\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(AlertProvider, \"XhbdHYBQeTA7ZvQAKo7930em6uc=\");\n_c = AlertProvider;\nvar _c;\n$RefreshReg$(_c, \"AlertProvider\");","map":{"version":3,"names":["React","createContext","useState","jsxDEV","_jsxDEV","AlertContext","AlertProvider","children","_s","alerts","setAlerts","addAlert","message","severity","timeout","id","Math","random","toString","substr","newAlert","prevAlerts","setTimeout","removeAlert","filter","alert","clearAlerts","setError","setWarning","setInfo","setSuccess","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Community Connector/client/src/contexts/AlertContext.js"],"sourcesContent":["import React, { createContext, useState } from 'react';\n\nexport const AlertContext = createContext();\n\nexport const AlertProvider = ({ children }) => {\n  const [alerts, setAlerts] = useState([]);\n\n  // Add alert\n  const addAlert = (message, severity = 'info', timeout = 5000) => {\n    const id = Math.random().toString(36).substr(2, 9);\n    const newAlert = {\n      id,\n      message,\n      severity, // 'error', 'warning', 'info', 'success'\n      timeout\n    };\n\n    setAlerts(prevAlerts => [...prevAlerts, newAlert]);\n\n    // Auto remove alert after timeout\n    if (timeout > 0) {\n      setTimeout(() => removeAlert(id), timeout);\n    }\n\n    return id;\n  };\n\n  // Remove alert\n  const removeAlert = (id) => {\n    setAlerts(prevAlerts => prevAlerts.filter(alert => alert.id !== id));\n  };\n\n  // Clear all alerts\n  const clearAlerts = () => {\n    setAlerts([]);\n  };\n\n  // Convenience methods for different alert types\n  const setError = (message, timeout = 5000) => addAlert(message, 'error', timeout);\n  const setWarning = (message, timeout = 5000) => addAlert(message, 'warning', timeout);\n  const setInfo = (message, timeout = 5000) => addAlert(message, 'info', timeout);\n  const setSuccess = (message, timeout = 5000) => addAlert(message, 'success', timeout);\n\n  return (\n    <AlertContext.Provider\n      value={{\n        alerts,\n        addAlert,\n        removeAlert,\n        clearAlerts,\n        setError,\n        setWarning,\n        setInfo,\n        setSuccess\n      }}\n    >\n      {children}\n    </AlertContext.Provider>\n  );\n};"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvD,OAAO,MAAMC,YAAY,gBAAGJ,aAAa,CAAC,CAAC;AAE3C,OAAO,MAAMK,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7C,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;;EAExC;EACA,MAAMS,QAAQ,GAAGA,CAACC,OAAO,EAAEC,QAAQ,GAAG,MAAM,EAAEC,OAAO,GAAG,IAAI,KAAK;IAC/D,MAAMC,EAAE,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;IAClD,MAAMC,QAAQ,GAAG;MACfL,EAAE;MACFH,OAAO;MACPC,QAAQ;MAAE;MACVC;IACF,CAAC;IAEDJ,SAAS,CAACW,UAAU,IAAI,CAAC,GAAGA,UAAU,EAAED,QAAQ,CAAC,CAAC;;IAElD;IACA,IAAIN,OAAO,GAAG,CAAC,EAAE;MACfQ,UAAU,CAAC,MAAMC,WAAW,CAACR,EAAE,CAAC,EAAED,OAAO,CAAC;IAC5C;IAEA,OAAOC,EAAE;EACX,CAAC;;EAED;EACA,MAAMQ,WAAW,GAAIR,EAAE,IAAK;IAC1BL,SAAS,CAACW,UAAU,IAAIA,UAAU,CAACG,MAAM,CAACC,KAAK,IAAIA,KAAK,CAACV,EAAE,KAAKA,EAAE,CAAC,CAAC;EACtE,CAAC;;EAED;EACA,MAAMW,WAAW,GAAGA,CAAA,KAAM;IACxBhB,SAAS,CAAC,EAAE,CAAC;EACf,CAAC;;EAED;EACA,MAAMiB,QAAQ,GAAGA,CAACf,OAAO,EAAEE,OAAO,GAAG,IAAI,KAAKH,QAAQ,CAACC,OAAO,EAAE,OAAO,EAAEE,OAAO,CAAC;EACjF,MAAMc,UAAU,GAAGA,CAAChB,OAAO,EAAEE,OAAO,GAAG,IAAI,KAAKH,QAAQ,CAACC,OAAO,EAAE,SAAS,EAAEE,OAAO,CAAC;EACrF,MAAMe,OAAO,GAAGA,CAACjB,OAAO,EAAEE,OAAO,GAAG,IAAI,KAAKH,QAAQ,CAACC,OAAO,EAAE,MAAM,EAAEE,OAAO,CAAC;EAC/E,MAAMgB,UAAU,GAAGA,CAAClB,OAAO,EAAEE,OAAO,GAAG,IAAI,KAAKH,QAAQ,CAACC,OAAO,EAAE,SAAS,EAAEE,OAAO,CAAC;EAErF,oBACEV,OAAA,CAACC,YAAY,CAAC0B,QAAQ;IACpBC,KAAK,EAAE;MACLvB,MAAM;MACNE,QAAQ;MACRY,WAAW;MACXG,WAAW;MACXC,QAAQ;MACRC,UAAU;MACVC,OAAO;MACPC;IACF,CAAE;IAAAvB,QAAA,EAEDA;EAAQ;IAAA0B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAAC5B,EAAA,CAvDWF,aAAa;AAAA+B,EAAA,GAAb/B,aAAa;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}